---
- name: Ensure apt key is not present in trusted.gpg.d
  ansible.builtin.file:
    path: /etc/apt/trusted.gpg.d/docker.asc
    state: absent

- name: Ensure old apt source list is not present in /etc/apt/sources.list.d
  ansible.builtin.file:
    path: "/etc/apt/sources.list.d/download_docker_com_linux_{{ docker_apt_ansible_distribution | lower }}.list"
    state: absent

- name: Ensure the repo referencing the previous trusted.gpg.d key is not present
  ansible.builtin.apt_repository:
    repo: "deb [arch={{ docker_apt_arch }} signed-by=/etc/apt/trusted.gpg.d/docker.asc] {{ docker_repo_url }}/{{ docker_apt_ansible_distribution | lower }} {{ ansible_distribution_release }} {{ docker_apt_release_channel }}"
    state: absent
    filename: "{{ docker_apt_filename }}"
    update_cache: true
  when: docker_add_repo | bool

- name: Ensure old versions of Docker are not installed.
  ansible.builtin.package:
    name: "{{ docker_obsolete_packages }}"
    state: absent

- name: Ensure dependencies are installed.
  ansible.builtin.apt:
    name:
      - apt-transport-https
      - ca-certificates
    state: present
  when: docker_add_repo | bool

- name: Ensure directory exists for /etc/apt/keyrings
  ansible.builtin.file:
    path: /etc/apt/keyrings
    state: directory
    mode: "0755"

- name: Add Docker apt key.
  ansible.builtin.get_url:
    url: "{{ docker_apt_gpg_key }}"
    dest: /etc/apt/keyrings/docker.asc
    mode: "0644"
    force: false
    checksum: "{{ docker_apt_gpg_key_checksum | default(omit) }}"
  register: add_repository_key
  ignore_errors: "{{ docker_apt_ignore_key_error }}"
  when: docker_add_repo | bool

- name: Ensure curl is present (on older systems without SNI).
  ansible.builtin.package:
    name: curl
    state: present
  when: add_repository_key is failed and docker_add_repo | bool

- name: Add Docker apt key (alternative for older systems without SNI). # noqa no-changed-when yaml[comments] command-instead-of-module risky-shell-pipe
  ansible.builtin.shell: >
    curl -sSL {{ docker_apt_gpg_key }} | apt-key add -
  when: add_repository_key is failed and docker_add_repo | bool

- name: Add Docker repository.
  ansible.builtin.apt_repository:
    repo: "{{ docker_apt_repository }}"
    state: present
    filename: "{{ docker_apt_filename }}"
    update_cache: true
  when: docker_add_repo | bool

- name: Install Docker packages.
  ansible.builtin.package:
    name: "{{ docker_packages }}"
    state: "{{ docker_packages_state }}"
  notify: Restart docker
  ignore_errors: "{{ ansible_check_mode }}"
  when: "ansible_version.full is version_compare('2.12', '<') or ansible_os_family not in ['RedHat', 'Debian']"

- name: Install Docker packages (with downgrade option).
  ansible.builtin.package:
    name: "{{ docker_packages }}"
    state: "{{ docker_packages_state }}"
    allow_downgrade: true
  notify: Restart docker
  ignore_errors: "{{ ansible_check_mode }}"
  when: "ansible_version.full is version_compare('2.12', '>=') and ansible_os_family in ['RedHat', 'Debian']"

# - name: Install docker-compose plugin.
#   ansible.builtin.package:
#     name: "{{ docker_compose_package }}"
#     state: "{{ docker_compose_package_state }}"
#   notify: Restart docker
#   ignore_errors: "{{ ansible_check_mode }}"
#   when: "docker_install_compose_plugin | bool == true and (ansible_version.full is version_compare('2.12', '<') or ansible_os_family not in ['RedHat', 'Debian'])"
#
- name: Install docker-compose-plugin (with downgrade option).
  ansible.builtin.package:
    name: "{{ docker_compose_package }}"
    state: "{{ docker_compose_package_state }}"
    allow_downgrade: true
  notify: Restart docker
  ignore_errors: "{{ ansible_check_mode }}"
  # when: "docker_install_compose_plugin | bool == true and ansible_version.full is version_compare('2.12', '>=') and ansible_os_family in ['RedHat', 'Debian']"

- name: Ensure /etc/docker/ directory exists.
  ansible.builtin.file:
    path: /etc/docker
    state: directory
    mode: "0755"
  when: docker_daemon_options.keys() | length > 0

- name: Configure Docker daemon options.
  ansible.builtin.copy:
    content: "{{ docker_daemon_options | to_nice_json }}"
    dest: /etc/docker/daemon.json
    mode: "0644"
  when: docker_daemon_options.keys() | length > 0
  notify: Restart docker

- name: Ensure Docker is started and enabled at boot.
  ansible.builtin.service:
    name: docker
    state: "{{ docker_service_state }}"
    enabled: "{{ docker_service_enabled }}"
  ignore_errors: "{{ ansible_check_mode }}"
  when: docker_service_manage | bool

# NOTE: ? Do i need this?
- name: Ensure handlers are notified now to avoid firewall conflicts.
  ansible.builtin.meta: flush_handlers

- name: Check current docker-compose version.
  ansible.builtin.command: "{{ docker_compose_path }} --version"
  register: docker_compose_vsn
  check_mode: false
  changed_when: false
  failed_when: false

- ansible.builtin.set_fact: # noqa name[missing] yaml[comments]
    docker_compose_current_version: "{{ docker_compose_vsn.stdout | regex_search('(\\d+(\\.\\d+)+)') }}"
  when: >
    docker_compose_vsn.stdout is defined
    and (docker_compose_vsn.stdout | length > 0)

- name: Delete existing docker-compose version if it's different.
  ansible.builtin.file:
    path: "{{ docker_compose_path }}"
    state: absent
  when: >
    docker_compose_current_version is defined
    and (docker_compose_version | regex_replace('v', '')) not in docker_compose_current_version

- name: Install Docker Compose (if configured).
  ansible.builtin.get_url:
    url: "{{ docker_compose_url }}"
    dest: "{{ docker_compose_path }}"
    mode: "0755"
  when: >
    (docker_compose_current_version is not defined)
    or (docker_compose_current_version | length == 0)
    or (docker_compose_current_version is version((docker_compose_version | regex_replace('v', '')), '<'))

- name: Get docker group info using getent.
  ansible.builtin.getent:
    database: group
    key: docker
    split: ":"
  when: docker_users | length > 0

- name: Check if there are any users to add to the docker group.
  ansible.builtin.set_fact:
    at_least_one_user_to_modify: true
  when:
    - docker_users | length > 0
    - item not in ansible_facts.getent_group["docker"][2]
  with_items: "{{ docker_users }}"

- name: Ensure docker users are added to the docker group.
  ansible.builtin.user:
    name: "{{ item }}"
    groups: docker
    append: true
  with_items: "{{ docker_users }}"

- name: Reset ssh connection to apply user changes.
  ansible.builtin.meta: reset_connection
